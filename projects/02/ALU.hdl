// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1


CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?                            0
        nx, // negate the x input?                          0
        zy, // zero the y input?                            1
        ny, // negate the y input?                          1
        f,  // compute out = x + y (if 1) or x & y (if 0)   1
        no; // negate the out output?                       0

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    Mux16(a=x, b=false, sel=zx, out=tempx); // zeroes x if needed
    Not16(in=tempx, out=negativex);  // these two negates the x if needed
    Mux16(a=tempx, b=negativex, sel=nx, out=finx);

    Mux16(a=y, b=false, sel=zy, out=tempy); // zeroes y if needed
    Not16(in=tempy, out=negativey);  // these two negates the y if needed
    Mux16(a=tempy, b=negativey, sel=ny, out=finy);

    Add16(a=finx, b=finy, out=xaddy);
    And16(a=finx, b=finy, out=xandy);  // calculates both xaddy and andy

    Mux16(a=xandy, b=xaddy, sel=f, out=calculatedout);

    Not16(in=calculatedout, out=notout);

    Mux16(a=calculatedout, b=notout, sel=no, out=out, out[15]=ng, out[0..7]=zr1, out[8..15]=zr2);

    Or8Way(in=zr1, out=firstor);
    Or8Way(in=zr2, out=secondor);
    Or(a=firstor, b=secondor, out=notzr);
    Not(in=notzr, out=zr);
}
















