// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    /* 
    1. Execute hack instruction
     a) Fetch from program memory Put location of instruction in memory addres
        -) instruction = Memory( location of instruction )
     b) Execute instruction
    2. What instruction to execute next?


    # 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
    #  i  x  x  a  c  c c c c c d d d j j j
    
    */

    Not(in=instruction[15], out=aInstruct);
    Not(in=aInstruct, out=cInstruct);

    Mux16(a=false, b=instruction, sel=cInstruct, out[3]=writeM);
    
    Mux16(a=aluOut, b=instruction, sel=aInstruct, out=inA);

    Or(a=aInstruct, b=instruction[5], out=loadA);
    ARegister(in=inA, load=loadA, out=aOut, out[0..14]=addressM);

    And(a=cInstruct, b=instruction[4], out=loadD);
    DRegister(in=aluOut, load=loadD, out=dOut);
    
    And(a=cInstruct, b=instruction[12], out=useA);
    Mux16(a=aOut, b=inM, sel=useA, out=aOrInM);

    ALU(x=dOut, y=aOrInM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out=outM, zr=zr, ng=ng);
    //

    Not(in=zr, out=JNE);

    // JGT if out > 0 JUMP
    Not(in=ng, out=possiblyOverZero);
    And(a=possiblyOverZero, b=JNE, out=JGT);

    // JEQ out == 0
    And(a=zr, b=zr, out=JEQ);

    // JGE out >= 0
    Or(a=JEQ, b=JGT, out=JGE);

    // JLT out < 0
    And(a=ng, b=ng, out=JLT);

    
    // JLE out <= 0
    Or(a=JLT, b=JEQ, out=JLE);

    Mux8Way16(
        a[0..15]=false, 

        b[0]=JGT, b[1..15]=false,
        c[0]=JEQ, c[1..15]=false,
        d[0]=JGE, d[1..15]=false,
        e[0]=JLT, e[1..15]=false,
        f[0]=JNE, f[1..15]=false,
        g[0]=JLE, g[1..15]=false,

        h[0..15]=true, 
        sel=instruction[0..2], 
        out[0]=mayJump
    );

    And(a=mayJump, b=instruction[15], out=jump);

    Not(in=jump, out=increment);

    PC(in=aOut, load=jump, inc=increment, reset=reset, out[0..14]=pc);



}