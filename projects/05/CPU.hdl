// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // 1. Execute hack instruction
    //  a) Fetch from program memory Put location of instruction in memory addres
    //     -) instruction = Memory( location of instruction )
    //  b) Execute instruction
    // 2. What instruction to execute next?

    // Memory(in=loc_ins, load=true, address=, out=);

    // # 0 12 3 456789 10-12 13-15
    // # 1 11 a cccccc d d d j j j

    // 0: opcode... 0 = A instruks, 1 = C instruks

    // a 
    // c: ALU
    // d: a register, d register og writeM
    // j: jump control bits

    /*

    A)

    @1

    C)
    D=M + M
    D=M - M
    M=
    A=

    Notation:
    sil__: should i load __
    w__: write to __

    */

    Mux16(a=, b=, sel=, out=);


    ARegister(in=instruction, load=instruction[0], out=aRegisterOUT, out[0..14]=addressM);

    Memory(in=, load=, address=, out=);

    // C instrukser

    // write to the A register
    ARegister(in=wareg, load=silareg, out=);

    // write to the D register

    // write to memory




    // Mux16(a=aRegisterOUT, b=inM, sel=instruction[2], out=aluIN2mux);
    // DRegister(in=aluOUT, load=instruction[D_1], out=aluIN1dReg);

    // ALU(x=aluIN1dReg, y=aluIN2mux, zx=instruction[4], nx=instruction[5], zy=instruction[6], ny=instruction[7], f=instruction[8], no=instruction[9], out=aluOUT, out=outM, zr=aluOUTzr, ng=aluOUTng);

    // And(a=instruction[D_2], b=instruction[D_2], out=writeM);


    // PC(in=aRegisterOUT, load=instruction[1], inc=instruction[2], reset=reset, out[0..14]=pc);



}